<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexander Stephan</title>
    <description>Essays about mythoughts and projects</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 May 2019 22:28:00 +0200</pubDate>
    <lastBuildDate>Fri, 24 May 2019 22:28:00 +0200</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Getting started with Arch Linux</title>
        <description>&lt;h2 id=&quot;warranty-disclaimer&quot;&gt;Warranty Disclaimer:&lt;/h2&gt;

&lt;p&gt;I am not responsible for data loss, possible hardware failures, thermonuclear war, or you getting fired because your arch driven atomic plant failed.&lt;/p&gt;

&lt;p&gt;If you have any concerns regarding the installation don’t hesitate to do some research on your own to prevent possible failures or bugs.&lt;/p&gt;

&lt;p&gt;After booting the arch iso you’ll will have to proceed with the following steps:&lt;/p&gt;

&lt;h2 id=&quot;prerequisits&quot;&gt;Prerequisits:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A working &lt;a href=&quot;https://www.archlinux.org/download/&quot;&gt;Arch Linux&lt;/a&gt; boot stick&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;path-to-image.iso&amp;gt; &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/&amp;lt;name-of-usb&amp;gt; &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4M &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;progress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;A BIOS that capable of UEFI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1-prepare-root-file-system&quot;&gt;Step 1: Prepare root file system&lt;/h2&gt;

&lt;p&gt;Temporarily load your preferred keyboard layout.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;loadkeys de
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Find out your block device name (&lt;code class=&quot;highlighter-rouge&quot;&gt;-Sp&lt;/code&gt; makes it easier to recognize the drive).&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsblk &lt;span class=&quot;nt&quot;&gt;-Sp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For quick formatting use &lt;code class=&quot;highlighter-rouge&quot;&gt;parted&lt;/code&gt;, otherwise you can proceed using &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;gdisk&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;option-1&quot;&gt;Option 1:&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;parted
mkpart primary fat32 1MiB 261MiBi &lt;span class=&quot;c&quot;&gt;# Create EFI system partition&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;1 esp on
mkpart primary ext4 261MiB 100% &lt;span class=&quot;c&quot;&gt;# Use the rest as ext4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So this command creates a primary GPT partition on your device and creates a 260MiB boot partition at the start sector that will later become the EFI partiton for UEFI boot. Then we use the rest of the drive for installing the system. Of course you can tweak these commands according to your specific needs.&lt;/p&gt;

&lt;h3 id=&quot;option-2&quot;&gt;Option 2:&lt;/h3&gt;

&lt;p&gt;Type in &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk&lt;/code&gt; and navigate your way through the dialogs.&lt;/p&gt;

&lt;p&gt;Now you can format both partitions you just created as you desire.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkfs.vfat /dev/&amp;lt;devicename&amp;gt;1
mkfs.ext4 /dev/&amp;lt;devicename&amp;gt;2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Mount devices so we can install the base root system on our drive&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /mnt/boot/
mount /dev/&amp;lt;devicename&amp;gt;2 /mnt
mount /dev/&amp;lt;devicename&amp;gt;1 /mnt/boot/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Install base system including developer tools and patches for Intel processors on target device.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacstrap /mnt base base-devel intel-ucode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generate &lt;code class=&quot;highlighter-rouge&quot;&gt;fstab&lt;/code&gt; (contains all drives that will be mounted during booting).&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;genfstab &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /mnt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2-setup-the-new-root-system&quot;&gt;Step 2: Setup the new root system&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arch-chroot /mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, as we moved to our new system, we can proceed to set all the basic parameters and settings. A good start is to set the host name:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;myhost &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we want to set our language. We do that by writing the LANG	variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/locale.conf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LANG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US.UTF-8 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/locale.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterwards we want to uncomment the disired entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/locale.gen&lt;/code&gt; with the editor of your choice, so we can generate it in the next step with the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;locale-gen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can set our &lt;a href=&quot;https://wiki.archlinux.org/index.php/Linux_console/Keyboard_configuration&quot;&gt;keyboard layout&lt;/a&gt;. You can check your current layout with &lt;code class=&quot;highlighter-rouge&quot;&gt;localectl status&lt;/code&gt; and to print all options use &lt;code class=&quot;highlighter-rouge&quot;&gt;localectl list-keymaps&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEYMAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;de-latin1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/vconsole.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the next step we should set our &lt;a href=&quot;https://wiki.archlinux.org/index.php/System_time#Time_zone&quot;&gt;time zone&lt;/a&gt;. To check out the current time zone use &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl status&lt;/code&gt;. To list all time zones use &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl list-timezones&lt;/code&gt;. Later we can install an NTP client that automatically syncs the clock over the network.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sf&lt;/span&gt; /usr/share/zoneinfo/Europe/Berlin /etc/localtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s also a good idea to rank the mirros, so we can have faster download speeds when installing software. You can either manually sort them or use &lt;a href=&quot;https://wiki.archlinux.org/index.php/Reflector&quot;&gt;Reflector&lt;/a&gt;. This command for example sorts the 5 most recent mirrors by download speed. If you want only mirrors for your specific country use &lt;code class=&quot;highlighter-rouge&quot;&gt;-- country&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reflector &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--latest&lt;/span&gt; 50 &lt;span class=&quot;nt&quot;&gt;--sort&lt;/span&gt; rate &lt;span class=&quot;nt&quot;&gt;--protocol&lt;/span&gt; https &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; /etc/pacman.d/mirrorlist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To continously refresh the mirrorlist we can create the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/pacman.d/hooks/mirrorupgrade.hook&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Trigger]
Operation = Upgrade
Type = Package
Target = pacman-mirrorlist

[Action]
Description = Updating pacman-mirrorlist with reflector and removing pacnew...
When = PostTransaction
Depends = reflector
Exec = /bin/sh -c &quot;reflector --country 'United Germany' --latest 50 --age 24 --sort rate --save /etc/pacman.d/mirrorlist; rm -f /etc/pacman.d/mirrorlist.pacnew&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we should set up our local domains, so we can things like &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reflector &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--latest&lt;/span&gt; 50 &lt;span class=&quot;nt&quot;&gt;--sort&lt;/span&gt; rate &lt;span class=&quot;nt&quot;&gt;--protocol&lt;/span&gt; https &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; /etc/pacman.d/mirrorlist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also for compabilities sake it’s a good idea to enable 32-bit libraries. Do that by uncommenting  the&lt;code class=&quot;highlighter-rouge&quot;&gt;[multilib]&lt;/code&gt; entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/pacman.conf&lt;/code&gt;.
To refresh the mirrorlist use &lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -Sy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A root password is always a good idea. Create one by using &lt;code class=&quot;highlighter-rouge&quot;&gt;passwd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create an initramfs that loads programs very early in the &lt;code class=&quot;highlighter-rouge&quot;&gt;userspace&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkinitcpio &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we need to install a boot loader. If you use UEFI you can do the following after installing it with &lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S grub&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grub-install &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x86_64-efi &lt;span class=&quot;nt&quot;&gt;--efi-directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/boot &lt;span class=&quot;nt&quot;&gt;--bootloader-id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;grub
grub-mkconfig &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can create a non-root user and add him to any group for example &lt;code class=&quot;highlighter-rouge&quot;&gt;wheel&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;audio&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;useradd &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /bin/bash alex
gpasswd &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; alex wheel audio 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Automatically set the system time:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; systemd-timesyncd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;step-3-moving-to-a-graphical-envirement&quot;&gt;Step 3: Moving to a graphical envirement&lt;/h2&gt;

&lt;p&gt;Now, as we have a layed down a solid foundation for our system we can move on by installing a window manager or a desktop environment to finally feel at home. For better performance install a sufficient driver. The open source drivers are &lt;code class=&quot;highlighter-rouge&quot;&gt;xf86-video-intel&lt;/code&gt; for Intel, &lt;code class=&quot;highlighter-rouge&quot;&gt;xf86-video-amdgpu&lt;/code&gt; for AMD and finally &lt;code class=&quot;highlighter-rouge&quot;&gt;xf86-video-nouveau&lt;/code&gt; for Nvidia users.&lt;/p&gt;

&lt;p&gt;If you don’t rely on any X depenend software, I’d recommend you to give &lt;a href=&quot;https://swaywm.org/&quot;&gt;sway&lt;/a&gt; a try. Installing it via pacman will also install all important dependencies.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; sway dmenu rxvt-unicode xorg-server-xwayland
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can start sway by adding it to the end of your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For further customization please refer to my &lt;a href=&quot;https://github.com/alexanderstephan/dotfiles&quot;&gt;dotfiles repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this helped!&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Oct 2018 17:07:19 +0200</pubDate>
        <link>/articles/2018-10/arch-rice-with-encryption</link>
        <guid isPermaLink="true">/articles/2018-10/arch-rice-with-encryption</guid>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Programming a GH60 on Linux</title>
        <description>&lt;p&gt;I recently wanted to update my keyboards layout and thought it was a good opportunity to come with a guide since many friends keep asking me how to flash their keyboard on Linux. In this case I am requiring an Atmel-based PCB as we’re using DFU-Programmer which is developed for Atmel-Microcontrollers. But there is a good chance, that you have one in your keyboard as well since they are the most popular manufacturer for micro controllers.&lt;/p&gt;

&lt;p&gt;Install prerequisites:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; python python-pip python-wxpython  dfu-programmer 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;First of all we need to come up with our layout, which we use easykeymap.sh from the EasyAVR package for. It also generates a .hex file which we later use for flashing. In order to run easykeymap.sh we need to clone the project from GitLab.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://gitlab.com/ChuckN408/EasyAVR.git &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;EasyAVR
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./easykeymap.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Firstly you need to create a new layout file and select your board accordingly. In my case it’s a GH60. There is also an option that lets you roughly determine the keyboard layout. In my case I selected ISO here as it’s the standard here in Europe. Now you can either further modify your selected layout in easykeymapper itself or use one from an external source. For example you can generate layout files online by using the [keyboard-layout-editor(https://keyboard-layout-editor.com).&lt;/p&gt;

&lt;p&gt;To map the keys select the key you want to remap and click on the white rectangle beneath the scan code in the context menu. Now a virtual keyboard assists you in finding the correct key. In order to use function layers, you need to define a key as ‘Fn1’, ‘Fn0’ will not work. If you finished your layout you can go ahead and save it now in .json format for later modifications.&lt;/p&gt;

&lt;p&gt;Now you need to export the .hex file, that we will going to flash on to the keyboards microcontroller. To program your board you can either choose the “Build &amp;amp; Program” option or use dfu-programmer manually. I prefer the by hand method for security reasons since it doesn’t require you to open easykeymapper as root user. But keep in mind that you first need to put your board into boot mode by either pressing a reset button at the back of your PCB or use a predefined boot button.&lt;/p&gt;

&lt;p&gt;The programming steps are as follows. If you’re board uses a different microntroller than the atmega32u4 simply replace the name. But keep in mind you need to use a second keyboard to enter the commands. Alternatively you can use a &lt;a href=&quot;https://gist.github.com/alexanderstephan/655e9fc4ab07f268af271c4084c19fef&quot;&gt;script&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Using the script:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://gist.githubusercontent.com/alexanderstephan/655e9fc4ab07f268af271c4084c19fef/raw/bee744308b81e524557fde6ad2890ba4a74414da/gh60.sh &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; gh60.sh
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x gh60.sh
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./gh60.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or just do it manually, if you only do it once in a while.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dfu-programmer atmega32u4 erase &lt;span class=&quot;nt&quot;&gt;--suppress-validation&lt;/span&gt;
dfu-programmer atmega32u4 flash &amp;lt;filename&amp;gt;.hex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 22 Oct 2018 17:07:19 +0200</pubDate>
        <link>/articles/2018-10/gh60-on-linux</link>
        <guid isPermaLink="true">/articles/2018-10/gh60-on-linux</guid>
        
        
        <category>tutorial</category>
        
      </item>
    
  </channel>
</rss>
